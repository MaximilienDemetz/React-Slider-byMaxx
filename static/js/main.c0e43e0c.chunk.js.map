{"version":3,"sources":["Slider/SliderMain.js","Slider/SliderRoot.js","datas/datas.js","App.js","serviceWorker.js","index.js"],"names":["SliderMain","this","props","voyage","id","picture","taxonomy","className","style","backgroundImage","Component","SliderMax","state","voyages","data","navClick","bind","event","preventDefault","clickedButton","currentTarget","console","log","copieVoyages","slice","lastElt","pop","unshift","setState","firstElt","shift","push","onClick","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAiBeA,E,iLAdF,IAAD,EAC4BC,KAAKC,MAAMC,OAApCC,EADH,EACGA,GAAIC,EADP,EACOA,QAASC,EADhB,EACgBA,SACpB,OACI,yBAAKF,GAAE,gBAAWA,GAAMG,UAAU,8DAA8DC,MAAO,CAACC,gBAAgB,OAAD,OAAQJ,EAAR,OAEnH,yBAAKE,UAAU,gBACX,wBAAIA,UAAU,iBAAiBD,GAE/B,mC,GATKI,aCwEVC,E,YAtEX,WAAYT,GAAO,IAAD,8BACd,4CAAMA,KACDU,MAAO,CACRC,QAAS,EAAKX,MAAMY,KAAKD,SAE7B,EAAKE,SAAU,EAAKA,SAASC,KAAd,gBALD,E,sEAOTC,GACLA,EAAMC,iBAEN,IAAIC,EAAgBF,EAAMG,cAAchB,GACxCiB,QAAQC,IAAIH,GAEZ,IAAII,EAAetB,KAAKW,MAAMC,QAAQW,QAGtC,OAFAH,QAAQC,IAAIC,GAELJ,GACH,IAAI,aACAE,QAAQC,IAAI,aAEZ,IAAIG,EAAUF,EAAaG,MAC3BL,QAAQC,IAAIG,GAEZF,EAAaI,QAAQF,GAErBxB,KAAK2B,SAAS,CACVf,QAASU,IAEb,MACJ,IAAI,cACAF,QAAQC,IAAI,cAEZ,IAAIO,EAAWN,EAAaO,QAC5BT,QAAQC,IAAIO,GAEZN,EAAaQ,KAAKF,GAElB5B,KAAK2B,SAAS,CACVf,QAASU,IAEb,MACJ,QACIF,QAAQC,IAAI,0C,+BAGd,IACCT,EAAYZ,KAAKW,MAAjBC,QACP,OACQ,yBAAKN,UAAU,uBACX,6BAASA,UAAU,qBACf,4BAAQH,GAAG,aAAaG,UAAU,SAAQyB,QAAS/B,KAAKc,UAAxD,MAKJ,6BAASR,UAAU,wBAEXM,EAAQoB,KAAI,SAAA9B,GAAM,OAAI,kBAAC,EAAD,CAAY+B,IAAK/B,EAAOC,GAAID,OAAQA,QAIlE,6BAASI,UAAU,sBACf,4BAAQH,GAAG,cAAcG,UAAU,SAASyB,QAAS/B,KAAKc,UAA1D,W,GA/DAL,aCuDTI,EA1DF,CAET,QAAU,CAEN,CACI,GAAK,EACL,QAAW,0CACX,MAAS,gCACT,UAAa,iDACb,YAAe,GACf,SAAY,gBACZ,KAAQ,IAGZ,CACI,GAAK,EACL,QAAW,0CACX,MAAS,gCACT,UAAa,iDACb,YAAe,GACf,SAAY,gBACZ,KAAQ,IAGZ,CACI,GAAK,EACL,QAAW,0CACX,MAAS,gCACT,UAAa,iDACb,YAAe,GACf,SAAY,gBACZ,KAAQ,IAGZ,CACI,GAAK,EACL,QAAW,0CACX,MAAS,gCACT,UAAa,iDACb,YAAe,GACf,SAAY,gBACZ,KAAQ,IAGZ,CACI,GAAK,EACL,QAAW,0CACX,MAAS,gCACT,UAAa,iDACb,YAAe,GACf,SAAY,gBACZ,KAAQ,MCpCLqB,G,uLAPX,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAWO,KAAMA,S,GAJPJ,cCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c0e43e0c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass SliderMain extends Component {\r\n    render(){\r\n        const {id, picture, taxonomy} = this.props.voyage;\r\n        return(\r\n            <div id={`slide-${id}`} className=\"slide sliderMainContainer col-12 col-sm-6 col-md-4 col-lg-3\" style={{backgroundImage:`url(${picture})`}} >\r\n\r\n                <div className=\"photoDisplay\">\r\n                    <h2 className=\"titreTaxonomy\">{taxonomy}\r\n                    </h2>\r\n                    <br></br>\r\n                </div>\r\n            </div>\r\n        )  \r\n    }\r\n}\r\nexport default SliderMain;\r\n","import React, {Component} from 'react';\r\nimport SliderMain from './SliderMain';\r\n\r\nclass SliderMax extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            voyages: this.props.data.voyages,\r\n        };\r\n        this.navClick= this.navClick.bind(this);\r\n    }\r\n    navClick(event){\r\n        event.preventDefault();\r\n        //je récupère l'id du bouton cliqué\r\n        let clickedButton = event.currentTarget.id;\r\n        console.log(clickedButton);\r\n        //je fais une copie du tableau contenu dans mon state\r\n        let copieVoyages = this.state.voyages.slice();\r\n        console.log(copieVoyages);\r\n       \r\n        switch(clickedButton) {\r\n            case'leftNavBtn' :\r\n                console.log('left clic');\r\n                // Je supprime le dernier élément du tableau \r\n                let lastElt = copieVoyages.pop();\r\n                console.log(lastElt);\r\n                // Je réinsère cet élément au début du tableau\r\n                copieVoyages.unshift(lastElt);\r\n                //Je modifie mon state avec le nouveau tableau\r\n                this.setState({\r\n                    voyages: copieVoyages\r\n                });\r\n                break;\r\n            case'rightNavBtn' :\r\n                console.log('right clic');\r\n                // Je supprime le premier élément du tableau \r\n                let firstElt = copieVoyages.shift();\r\n                console.log(firstElt);\r\n                // Je réinsère cet élément à la fin du tableau\r\n                copieVoyages.push(firstElt);\r\n                //Je modifie mon state avec le nouveau tableau\r\n                this.setState({\r\n                    voyages: copieVoyages\r\n                });\r\n                break;\r\n            default :\r\n                console.log(\"sorry i don't recognize this button\");\r\n        }\r\n    }\r\n    render() {\r\n        const {voyages,} = this.state;\r\n        return(   \r\n                <div className='sliderRootContainer'>\r\n                    <section className='nav leftNav col-1' >\r\n                        <button id=\"leftNavBtn\" className='navBtn'onClick={this.navClick}>\r\n                            &#60;\r\n                        </button>\r\n                    </section>\r\n               \r\n                    <section className='sliderDisplay col-10'>\r\n                        {\r\n                            voyages.map(voyage => <SliderMain key={voyage.id} voyage={voyage} />)\r\n                        }\r\n                    </section>\r\n\r\n                    <section className='nav rightNav col-1'>\r\n                        <button id=\"rightNavBtn\" className='navBtn' onClick={this.navClick}>\r\n                            &#62;\r\n                        </button>\r\n                    </section>\r\n                </div>\r\n        );\r\n    }\r\n}\r\nexport default SliderMax;","const data = {\r\n\r\n    \"voyages\":[\r\n\r\n        {\r\n            \"id\":0,\r\n            \"picture\": \"https://picsum.photos/id/1000/1500/1000\",\r\n            \"titre\": \"Je suis le titre de la photo1\",\r\n            \"sousTitre\": \"je suis le sous titre éventuel de la photo1\",\r\n            \"description\": \"\",\r\n            \"taxonomy\": \"Taxonomy img1\",\r\n            \"prix\": \"\",\r\n            \r\n        },\r\n        {\r\n            \"id\":1,\r\n            \"picture\": \"https://picsum.photos/id/1011/1500/1000\",\r\n            \"titre\": \"Je suis le titre de la photo2\",\r\n            \"sousTitre\": \"je suis le sous titre éventuel de la photo2\",\r\n            \"description\": \"\",\r\n            \"taxonomy\": \"Taxonomy img2\",\r\n            \"prix\": \"\",\r\n            \r\n        },\r\n        {\r\n            \"id\":2,\r\n            \"picture\": \"https://picsum.photos/id/1015/1500/1000\",\r\n            \"titre\": \"Je suis le titre de la photo3\",\r\n            \"sousTitre\": \"je suis le sous titre éventuel de la photo3\",\r\n            \"description\": \"\",\r\n            \"taxonomy\": \"Taxonomy img3\",\r\n            \"prix\": \"\",\r\n            \r\n        },\r\n        {\r\n            \"id\":3,\r\n            \"picture\": \"https://picsum.photos/id/1043/1500/1000\",\r\n            \"titre\": \"Je suis le titre de la photo4\",\r\n            \"sousTitre\": \"je suis le sous titre éventuel de la photo4\",\r\n            \"description\": \"\",\r\n            \"taxonomy\": \"Taxonomy img4\",\r\n            \"prix\": \"\",\r\n            \r\n        },\r\n        {\r\n            \"id\":4,\r\n            \"picture\": \"https://picsum.photos/id/1051/1500/1000\",\r\n            \"titre\": \"Je suis le titre de la photo5\",\r\n            \"sousTitre\": \"je suis le sous titre éventuel de la photo5\",\r\n            \"description\": \"\",\r\n            \"taxonomy\": \"Taxonomy img5\",\r\n            \"prix\": \"\",\r\n            \r\n        }\r\n\r\n    ]\r\n}\r\n\r\nexport default data;","import React, {Component} from 'react';\nimport './App.css';\nimport SliderMax from './Slider/SliderRoot';\nimport data from './datas/datas';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <SliderMax data={data}/>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}